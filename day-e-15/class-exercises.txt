Session 1 [40]
---------------------------------------------------------------------------------------------------------

Task 1: Chunking data with generators
--------------------------------------------------------

You have a large list of items (e.g., 10,000 user IDs), and you want to process 
them in chunks of fixed size (say 100) — maybe for batching in an API call.

Example:

for chunk in chunk_data(user_ids, 100):
    print(f"Processing chunk: {chunk[:3]}...{chunk[-3:]}")  # show partial chunk

Processing chunk: [1, 2, 3]...[98, 99, 100]
Processing chunk: [101, 102, 103]...[198, 199, 200]
...


Task 2 Stream-Based Line Filtering (Simulating Log Monitor)
--------------------------------------------------------

You’re processing live logs and want to filter lines that contain a keyword, say "ERROR".
Write a generator: filter_log_lines


Example:

# Simulated log lines (could also be read line-by-line from a real file)
log_lines = [
    "2025-04-07 INFO User logged in",
    "2025-04-07 ERROR Failed to load resource",
    "2025-04-07 DEBUG Memory usage stable",
    "2025-04-07 ERROR Timeout occurred",
]

# Filter for error lines
for error in filter_log_lines(log_lines, keyword="ERROR"):
    print(">>", error)

Output:
>> 2025-04-07 ERROR Failed to load resource
>> 2025-04-07 ERROR Timeout occurred

Task 3 Progress Tracker
--------------------------------------------------------

Simulate a progress bar using a generator called progress_tracker(total_steps). 
At each step, yield the progress percentage as a string like "Progress: 20%".

# Example:
for p in progress_tracker(5):
    print(p)

Progress: 20%
Progress: 40%
Progress: 60%
Progress: 80%
Progress: 100%

Use a loop and yield formatted strings based on (step / total_steps) * 100.

Session 2: [30]
---------------------------------------------------------------------------------------------------------

Task #1
--------------------------------------------------------
Create a text-processing tool that reads a paragraph and returns each word 
one at a time when iterated over. You want to build a custom iterator 
class called WordIterator that takes a string of text and lets users 
iterate through its words using a for loop or next().

# Sample paragraph
paragraph = "Python is a powerful and versatile programming language."

# Create the iterator
word_iter = WordIterator(paragraph)

# Iterate through the words
for word in word_iter:
    print(word)

# Output
Python
is
a
powerful
and
versatile
programming
language.

Session 3: [40]
---------------------------------------------------------------------------------------------------------

Task 1: Checking method existance
--------------------------------------------------

Create a metaclass called RequireToString that ensures any class using it must define a 
__str__ method. If a class does not define __str__, raise a TypeError during class creation.

Task 2: Injecting methods
--------------------------------------------------

Create a metaclass called AutoInit that automatically injects an __init__ method into 
any class that:

Defines a class-level list called init_fields, e.g., ["name", "salary"].

If the __init__ method already exists, the metaclass should not override it.

The injected __init__ should assign values to those fields as instance attributes.

Raise an error if the init_fields list is missing or not a list.

Task 3: Creating custom exception
--------------------------------------------------

Create a NegativeNumberException

Define a nfactorial(n) function in which the above exception is raised

Use an exception handler to capture the exception when factorial() is
called with negative numbers